{"remainingRequest":"E:\\study\\vuejs\\router2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\study\\vuejs\\router2\\src\\views\\order.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\study\\vuejs\\router2\\src\\views\\order.vue","mtime":1559134432402},{"path":"E:\\study\\vuejs\\router2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\study\\vuejs\\router2\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\study\\vuejs\\router2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\study\\vuejs\\router2\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport MescrollVue from 'mescroll.js/mescroll.vue'\r\nexport default {\r\n  name: 'order',\r\n  components: {\r\n    MescrollVue // 注册mescroll组件\r\n  },\r\n  data(){\r\n    return {\r\n      mescroll: null, // mescroll实例对象\r\n      mescrollDown:{}, //下拉刷新的配置. (如果下拉刷新和上拉加载处理的逻辑是一样的,则mescrollDown可不用写了)\r\n      mescrollUp: { // 上拉加载的配置.\r\n        callback: this.upCallback, // 上拉回调,此处简写; 相当于 callback: function(page, mescroll) { }\r\n        //以下是一些常用的配置,当然不写也可以的.\r\n        page: {\r\n          num: 0, //当前页 默认0,回调之前会加1; 即callback(page)会从1开始\r\n          size: 10 //每页数据条数,默认10\r\n        },\r\n        htmlNodata: '<p class=\"upwarp-nodata\">没有数据</p>',\r\n        noMoreSize: 5,\r\n        toTop: {\r\n           //回到顶部按钮\r\n          src: \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1559144076961&di=e041f6fbc86f435ff98ae5891e738a55&imgtype=0&src=http%3A%2F%2Fku.90sjimg.com%2Felement_origin_min_pic%2F17%2F02%2F20%2Ff5a00969dcd21fe5483fa7a4270fa1af.jpg\", //图片路径,默认null,支持网络图\r\n          offset: 1000 //列表滚动1000px才显示回到顶部按钮\r\n        },\r\n        empty: {\r\n            //列表第一页无任何数据时,显示的空提示布局; 需配置warpId才显示\r\n          warpId: \"xxid\", //父布局的id (1.3.5版本支持传入dom元素)\r\n          icon: \"./static/mescroll/mescroll-empty.png\", //图标,默认null,支持网络图\r\n          tip: \"暂无相关数据~\" //提示\r\n        }\r\n      },\r\n      dataList: [] // 列表数据\r\n     }\r\n   },\r\n   beforeRouteEnter (to, from, next) { // 如果没有配置回到顶部按钮或isBounce,则beforeRouteEnter不用写\r\n     next(vm => {\r\n        // 找到当前mescroll的ref,调用子组件mescroll-vue的beforeRouteEnter方法\r\n       vm.$refs.mescroll && vm.$refs.mescroll.beforeRouteEnter() // 进入路由时,滚动到原来的列表位置,恢复回到顶部按钮和isBounce的配置\r\n     })\r\n   },\r\n   beforeRouteLeave (to, from, next) { // 如果没有配置回到顶部按钮或isBounce,则beforeRouteLeave不用写\r\n    // 找到当前mescroll的ref,调用子组件mescroll-vue的beforeRouteLeave方法\r\n   this.$refs.mescroll && this.$refs.mescroll.beforeRouteLeave() // 退出路由时,记录列表滚动的位置,隐藏回到顶部按钮和isBounce的配置\r\n   next()\r\n },\r\n methods: {\r\n        // mescroll组件初始化的回调,可获取到mescroll对象\r\n        mescrollInit (mescroll) {\r\n          this.mescroll = mescroll  // 如果this.mescroll对象没有使用到,则mescrollInit可以不用配置\r\n        },\r\n        // 上拉回调 page = {num:1, size:10}; num:当前页 ,默认从1开始; size:每页数据条数,默认10\r\n        upCallback (page, mescroll) {\r\n          // 联网请求\r\n          axios.get('http://template.test/api/test', {\r\n            params: {\r\n              page: page.num, // 页码\r\n              pageSize: page.size // 每页长度\r\n            }\r\n          }).then((response) => {\r\n            // 请求的列表数据\r\n            let arr = response.data\r\n            // 如果是第一页需手动置空列表\r\n            if (page.num === 1) this.dataList = []\r\n            // 把请求到的数据添加到列表\r\n            this.dataList = this.dataList.concat(arr)\r\n            // 数据渲染成功后,隐藏下拉刷新的状态\r\n            this.$nextTick(() => {\r\n              mescroll.endSuccess(arr.length)\r\n            })\r\n          }).catch((e) => {\r\n            // 联网失败的回调,隐藏下拉刷新和上拉加载的状态;\r\n            mescroll.endErr()\r\n          })\r\n        }\r\n      }\r\n}\r\n",{"version":3,"sources":["order.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"order.vue","sourceRoot":"src/views","sourcesContent":["<template lang=\"html\">\r\n  <div class=\"orders\">\r\n    <mescroll-vue ref=\"mescroll\" :down=\"mescrollDown\" :up=\"mescrollUp\" @init=\"mescrollInit\">\r\n     <ul>\r\n       <li v-for=\"item in datalist\" :key=\"item.id\">{{item.order_number}}</li>\r\n     </ul>\r\n   </mescroll-vue>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MescrollVue from 'mescroll.js/mescroll.vue'\r\nexport default {\r\n  name: 'order',\r\n  components: {\r\n    MescrollVue // 注册mescroll组件\r\n  },\r\n  data(){\r\n    return {\r\n      mescroll: null, // mescroll实例对象\r\n      mescrollDown:{}, //下拉刷新的配置. (如果下拉刷新和上拉加载处理的逻辑是一样的,则mescrollDown可不用写了)\r\n      mescrollUp: { // 上拉加载的配置.\r\n        callback: this.upCallback, // 上拉回调,此处简写; 相当于 callback: function(page, mescroll) { }\r\n        //以下是一些常用的配置,当然不写也可以的.\r\n        page: {\r\n          num: 0, //当前页 默认0,回调之前会加1; 即callback(page)会从1开始\r\n          size: 10 //每页数据条数,默认10\r\n        },\r\n        htmlNodata: '<p class=\"upwarp-nodata\">没有数据</p>',\r\n        noMoreSize: 5,\r\n        toTop: {\r\n           //回到顶部按钮\r\n          src: \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1559144076961&di=e041f6fbc86f435ff98ae5891e738a55&imgtype=0&src=http%3A%2F%2Fku.90sjimg.com%2Felement_origin_min_pic%2F17%2F02%2F20%2Ff5a00969dcd21fe5483fa7a4270fa1af.jpg\", //图片路径,默认null,支持网络图\r\n          offset: 1000 //列表滚动1000px才显示回到顶部按钮\r\n        },\r\n        empty: {\r\n            //列表第一页无任何数据时,显示的空提示布局; 需配置warpId才显示\r\n          warpId: \"xxid\", //父布局的id (1.3.5版本支持传入dom元素)\r\n          icon: \"./static/mescroll/mescroll-empty.png\", //图标,默认null,支持网络图\r\n          tip: \"暂无相关数据~\" //提示\r\n        }\r\n      },\r\n      dataList: [] // 列表数据\r\n     }\r\n   },\r\n   beforeRouteEnter (to, from, next) { // 如果没有配置回到顶部按钮或isBounce,则beforeRouteEnter不用写\r\n     next(vm => {\r\n        // 找到当前mescroll的ref,调用子组件mescroll-vue的beforeRouteEnter方法\r\n       vm.$refs.mescroll && vm.$refs.mescroll.beforeRouteEnter() // 进入路由时,滚动到原来的列表位置,恢复回到顶部按钮和isBounce的配置\r\n     })\r\n   },\r\n   beforeRouteLeave (to, from, next) { // 如果没有配置回到顶部按钮或isBounce,则beforeRouteLeave不用写\r\n    // 找到当前mescroll的ref,调用子组件mescroll-vue的beforeRouteLeave方法\r\n   this.$refs.mescroll && this.$refs.mescroll.beforeRouteLeave() // 退出路由时,记录列表滚动的位置,隐藏回到顶部按钮和isBounce的配置\r\n   next()\r\n },\r\n methods: {\r\n        // mescroll组件初始化的回调,可获取到mescroll对象\r\n        mescrollInit (mescroll) {\r\n          this.mescroll = mescroll  // 如果this.mescroll对象没有使用到,则mescrollInit可以不用配置\r\n        },\r\n        // 上拉回调 page = {num:1, size:10}; num:当前页 ,默认从1开始; size:每页数据条数,默认10\r\n        upCallback (page, mescroll) {\r\n          // 联网请求\r\n          axios.get('http://template.test/api/test', {\r\n            params: {\r\n              page: page.num, // 页码\r\n              pageSize: page.size // 每页长度\r\n            }\r\n          }).then((response) => {\r\n            // 请求的列表数据\r\n            let arr = response.data\r\n            // 如果是第一页需手动置空列表\r\n            if (page.num === 1) this.dataList = []\r\n            // 把请求到的数据添加到列表\r\n            this.dataList = this.dataList.concat(arr)\r\n            // 数据渲染成功后,隐藏下拉刷新的状态\r\n            this.$nextTick(() => {\r\n              mescroll.endSuccess(arr.length)\r\n            })\r\n          }).catch((e) => {\r\n            // 联网失败的回调,隐藏下拉刷新和上拉加载的状态;\r\n            mescroll.endErr()\r\n          })\r\n        }\r\n      }\r\n}\r\n</script>\r\n\r\n<style lang=\"css\" scoped>\r\n</style>\r\n"]}]}